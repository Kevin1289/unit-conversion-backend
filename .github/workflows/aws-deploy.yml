# CI Workflow: Deploy to AWS ECS
#
# Description:
#   This workflow automates the deployment of the application to AWS ECS. It builds the Docker image,
#   pushes it to Amazon ECR, updates the ECS task definition with the new image, and deploys the updated
#   task definition to the ECS service.
#
# Triggers:
#   - Pushes to the master branch
#
# Steps:
#   1. Checkout code: Fetches the codebase associated with the specified branch from the VCS repository.
#   2. Cache Maven dependencies: Caches Maven dependencies to speed up subsequent builds.
#   3. Set up JDK: Sets up the Java environment using the specified JDK version.
#   4. Build with Maven: Builds the Maven project by executing Maven commands.
#   5. Install Maven dependencies (optional): Installs Maven dependencies if they are not cached.
#   6. Configure AWS credentials: Configures AWS credentials for authentication.
#   7. Login to Amazon ECR: Logs in to Amazon ECR to push Docker images.
#   8. Build, tag, and push image to Amazon ECR: Builds the Docker image, tags it, and pushes it to Amazon ECR.
#   9. Fill in the new image ID in the Amazon ECS task definition: Updates the ECS task definition with the new image ID.
#   10. Deploy Amazon ECS task definition: Deploys the updated ECS task definition to the ECS service.
#
name: Deploy to AWS ECS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - if: steps.cache.outputs.cache-hit != 'true'
        name: Install Maven dependencies
        run: mvn dependency:go-offline

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: unit-conversion
        run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: unit-conversion-app-task-definition.json
          container-name: unit-conversion
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: unit-conversion-service
          cluster: UnitConversion1
          wait-for-service-stability: true